# -*- coding: utf-8 -*-
"""Time series analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UZsPzKHtn2PK5ZCL9mvmJefoL3KqkZbH

# **üìö 1. Import th∆∞ vi·ªán c·∫ßn thi·∫øt**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.tsa.stattools import adfuller
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
from sklearn.metrics import mean_squared_error

# C√†i ƒë·∫∑t chung cho matplotlib v√† seaborn
sns.set_style("whitegrid")
plt.rcParams['figure.figsize'] = (12, 6)

"""# **üìö 2. ƒê·ªçc d·ªØ li·ªáu v√† x·ª≠ l√≠ d·ªØ li·ªáu**"""

# ƒê·ªçc d·ªØ li·ªáu t·ª´ URL
DATA_PATH = "https://redcap.huph.edu.vn/ddp/tsa/nhom4.csv"
df = pd.read_csv(DATA_PATH, sep=',', decimal='.', na_values=-200)

# Ch·ªçn c√°c c·ªôt c·∫ßn thi·∫øt
cols = ['Date', 'Time', 'CO(GT)', 'PT08.S1(CO)', 'NMHC(GT)', 'C6H6(GT)',
        'PT08.S2(NMHC)', 'NOx(GT)', 'PT08.S3(NOx)', 'NO2(GT)',
        'PT08.S4(NO2)', 'PT08.S5(O3)', 'T', 'RH', 'AH']
df = df[cols]

# Chuy·ªÉn ƒë·ªïi sang datetime v√† ƒë·∫∑t l√†m index
df['Timestamp'] = pd.to_datetime(df['Date'] + ' ' + df['Time'])
df = df.drop(columns=['Date', 'Time']).set_index('Timestamp')

# X·ª≠ l√Ω gi√° tr·ªã thi·∫øu
df = df.dropna()

# Hi·ªÉn th·ªã th√¥ng tin c∆° b·∫£n
print("Shape:", df.shape)
print("\nInfo:")
print(df.info())
print("\n5 d√≤ng ƒë·∫ßu ti√™n:")
print(df.head())

"""# **üìö 3. Plot d·ªØ li·ªáu th√¥**

# 3.1 Plot ch·∫•t √¥ nhi·ªÖm
"""

plt.figure(figsize=(15, 10))
pollutants = ['CO(GT)', 'NMHC(GT)', 'C6H6(GT)', 'NOx(GT)', 'NO2(GT)']
for i, col in enumerate(pollutants, 1):
    plt.subplot(3, 2, i)
    plt.plot(df.index, df[col], linewidth=1)
    plt.title(col)
plt.tight_layout()
plt.show()

"""# 3.2 Plot th·ªùi ti·∫øt"""

plt.figure(figsize=(12, 8))
meteo = ['T', 'RH', 'AH']
for i, col in enumerate(meteo, 1):
    plt.subplot(3, 1, i)
    plt.plot(df.index, df[col], color='orange', linewidth=1)
    plt.title(col)
plt.tight_layout()
plt.show()

"""# 3.3 Plot sensor"""

plt.figure(figsize=(15, 10))
sensors = ['PT08.S1(CO)', 'PT08.S2(NMHC)', 'PT08.S3(NOx)', 'PT08.S4(NO2)', 'PT08.S5(O3)']
for i, col in enumerate(sensors, 1):
    plt.subplot(3, 2, i)
    plt.plot(df.index, df[col], color='green', linewidth=1)
    plt.title(col)
plt.tight_layout()
plt.show()

"""# **üìö 4. Ph√¢n t√≠ch th√†nh ph·∫ßn m√πa v·ª• (Seasonal Decomposition)**"""

print("\nüìö 4. Ph√¢n t√≠ch th√†nh ph·∫ßn m√πa v·ª• (Seasonal Decomposition):")
for col in df.columns:
    series = df[col].dropna()
    if len(series) >= 48:  # ƒê·∫£m b·∫£o ƒë·ªß d·ªØ li·ªáu cho decomposition
        try:
            result = seasonal_decompose(series, model='additive', period=24)
            result.plot()
            plt.suptitle(f"Decomposition of {col}", y=1.02)
            plt.tight_layout()
            plt.show()
        except Exception as e:
            print(f"‚ö† Kh√¥ng th·ªÉ decomposition bi·∫øn {col}: {e}")
    else:
        print(f"‚ö† Bi·∫øn {col} kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ decomposition (√≠t h∆°n 48 quan s√°t).")

"""# **üìö 5. Ki·ªÉm tra t√≠nh d·ª´ng (ADF Test)**"""

print("\nüìö 5. Ki·ªÉm tra t√≠nh d·ª´ng (ADF Test):")
for col in df.columns:
    series = df[col].dropna()
    if len(series) > 0:
        try:
            result = adfuller(series)
            print(f"\nVariable: {col}")
            print(f'ADF Statistic: {result[0]:.4f}')
            print(f'p-value: {result[1]:.4f}')
            print('Critical Values:')
            for key, value in result[4].items():
                print(f'   {key}: {value:.4f}')
            if result[1] > 0.05:
                print("=> Chu·ªói kh√¥ng d·ª´ng (non-stationary)")
            else:
                print("=> Chu·ªói d·ª´ng (stationary)")
        except Exception as e:
            print(f"‚ö† Kh√¥ng th·ªÉ ki·ªÉm tra ADF cho bi·∫øn {col}: {e}")
    else:
        print(f"‚ö† Bi·∫øn {col} kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ ki·ªÉm tra ADF.")

"""# **üìö 6. V·∫Ω ACF v√† PACF**"""

print("\nüìö 6. V·∫Ω ACF v√† PACF:")
for col in df.columns:
    series = df[col].dropna()
    if len(series) >= 50:  # ƒê·∫£m b·∫£o ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ v·∫Ω ACF, PACF
        try:
            plt.figure(figsize=(12, 6))
            plt.suptitle(f"ACF and PACF for {col}", y=1.02)

            plt.subplot(1, 2, 1)
            plot_acf(series, ax=plt.gca(), lags=40)

            plt.subplot(1, 2, 2)
            plot_pacf(series, ax=plt.gca(), lags=40, method='ywmle')

            plt.tight_layout()
            plt.show()
        except Exception as e:
            print(f"‚ö† Kh√¥ng th·ªÉ v·∫Ω ACF/PACF cho bi·∫øn {col}: {e}")
    else:
        print(f"‚ö† Bi·∫øn {col} kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ v·∫Ω ACF/PACF.")

"""# **üìö 7. Moving Average (Trung b√¨nh tr∆∞·ª£t 24h)**"""

for col in df.columns:
    plt.figure(figsize=(12, 5))
    df[col].plot(label='Original', alpha=0.5)
    df[col].rolling(window=24).mean().plot(label='24h Rolling Mean', linewidth=2)
    plt.title(f"Original vs 24h Moving Average - {col}")
    plt.legend()
    plt.show()

"""# **üìö 8. Exponential Moving Average (EMA)**"""

for col in df.columns:
    plt.figure(figsize=(12, 5))
    df[col].plot(label='Original', alpha=0.5)
    df[col].ewm(span=24).mean().plot(label='EMA (span=24)', linewidth=2, color='red')
    plt.title(f"Original vs EMA - {col}")
    plt.legend()
    plt.show()

"""# **üìö 9. Forecast Evaluation (Naive RMSE)**"""

for col in df.columns:
    y_true = df[col][1:]
    y_pred = df[col][:-1]
    rmse = np.sqrt(mean_squared_error(y_true, y_pred))
    print(f"RMSE for {col}: {rmse:.4f}")
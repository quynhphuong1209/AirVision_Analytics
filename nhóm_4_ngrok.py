# -*- coding: utf-8 -*-
"""Nh√≥m 4_Ngrok.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18KN6b0KAOAN6R8brivSajJwqAZchbxkG
"""

# --- 1. C√†i ƒë·∫∑t c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt ---
!pip install streamlit plotly pandas seaborn pyngrok -q
!pip install pyngrok --upgrade -q

# --- 2. T·∫°o file app.py ---
# N·ªôi dung file: app.py
app_code = '''
import streamlit as st
import pandas as pd
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
from datetime import datetime
import time

# ====== C·∫§U H√åNH GIAO DI·ªÜN T·ªêI ======
st.set_page_config(
    page_title="AirVision Analytics",
    page_icon="üåç",
    layout="wide",
    initial_sidebar_state="expanded"
)

# T√πy ch·ªânh CSS cho giao di·ªán t·ªëi
def local_css(file_name):
    with open(file_name) as f:
        st.markdown(f'<style>{f.read()}</style>', unsafe_allow_html=True)

# T·∫°o file CSS t·∫°m v·ªõi theme t·ªëi
custom_css = """
:root {
    --primary-color: #4a8fe7;
    --secondary-color: #2c3e50;
    --accent-color: #ff6b6b;
    --dark-color: #1a1a1a;
    --light-color: #f8f9fa;
}

/* Main container */
.stApp {
    background-color: var(--dark-color);
    color: #ffffff;
}

/* Header */
header {
    background: linear-gradient(135deg, var(--primary-color), #3a7bd5);
    color: white !important;
    padding: 1rem 2rem !important;
    border-radius: 0 0 10px 10px;
    box-shadow: 0 4px 12px rgba(0,0,0,0.3);
}

/* Sidebar */
[data-testid="stSidebar"] {
    background-color: var(--secondary-color) !important;
    border-right: 1px solid #444;
    box-shadow: 2px 0 10px rgba(0,0,0,0.3);
    color: white;
}

/* Cards */
.custom-card {
    background: var(--secondary-color);
    color: white;
    border-radius: 10px;
    padding: 1.5rem;
    box-shadow: 0 4px 12px rgba(0,0,0,0.2);
    margin-bottom: 1.5rem;
    border-left: 4px solid var(--primary-color);
}

/* Buttons */
.stButton>button {
    border-radius: 8px !important;
    border: none !important;
    background-color: var(--primary-color) !important;
    color: white !important;
    transition: all 0.3s ease !important;
}

.stButton>button:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0,0,0,0.3) !important;
}

/* Tabs */
[data-baseweb="tab-list"] {
    gap: 10px;
}

[data-baseweb="tab"] {
    padding: 8px 16px !important;
    border-radius: 8px !important;
    background-color: #34495e !important;
    color: white !important;
    transition: all 0.3s ease !important;
}

[data-baseweb="tab"]:hover {
    background-color: #2c3e50 !important;
}

[aria-selected="true"] {
    background-color: var(--primary-color) !important;
    color: white !important;
}

/* Progress bar */
.stProgress > div > div > div > div {
    background-color: var(--primary-color) !important;
}

/* Tables */
.stDataFrame {
    background-color: var(--secondary-color) !important;
    color: white !important;
}
"""

with open('styles.css', 'w') as f:
    f.write(custom_css)
local_css('styles.css')

# ====== ANIMATION & EFFECTS ======
def render_animated_header():
    st.markdown("""
    <div style="display: flex; align-items: center; justify-content: space-between;">
        <div>
            <h1 style="color: white; margin-bottom: 0;">üåç AirVision Analytics</h1>
            <p style="color: white; opacity: 0.9; margin-top: 0.5rem;">Tr·ª±c quan h√≥a d·ªØ li·ªáu ch·∫•t l∆∞·ª£ng kh√¥ng kh√≠ & kh√≠ t∆∞·ª£ng</p>
        </div>
        <div style="background: rgba(255,255,255,0.2); padding: 0.5rem 1rem; border-radius: 20px; display: flex; align-items: center;">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" style="margin-right: 0.5rem;">
                <path d="M12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 12 2ZM12 20C7.59 20 4 16.41 4 12C4 7.59 7.59 4 12 4C16.41 4 20 7.59 20 12C20 16.41 16.41 20 12 20Z" fill="white"/>
                <path d="M12 6C8.69 6 6 8.69 6 12C6 15.31 8.69 18 12 18C15.31 18 18 15.31 18 12C18 8.69 15.31 6 12 6ZM12 16C9.79 16 8 14.21 8 12C8 9.79 9.79 8 12 8C14.21 8 16 9.79 16 12C16 14.21 14.21 16 12 16Z" fill="white"/>
                <path d="M12 10C10.9 10 10 10.9 10 12C10 13.1 10.9 14 12 14C13.1 14 14 13.1 14 12C14 10.9 13.1 10 12 10Z" fill="white"/>
            </svg>
            <span style="color: white;">Real-time Monitoring</span>
        </div>
    </div>
    """, unsafe_allow_html=True)

# ====== H√ÄM T·∫¢I D·ªÆ LI·ªÜU ======
@st.cache_data
def load_data():
    url = "https://redcap.huph.edu.vn/ddp/tsa/nhom4.csv"
    try:
        # ƒê·ªçc file CSV t·ª´ d·ªØ li·ªáu ƒë√£ upload
        df = pd.read_csv(url, sep=',', decimal='.')

        # K·∫øt h·ª£p c·ªôt Date v√† Time th√†nh Datetime
        df['Datetime'] = pd.to_datetime(
            df['Date'] + ' ' + df['Time'],
            format='%m/%d/%Y %H:%M:%S',
            errors='coerce'
        )

        # X√≥a c√°c d√≤ng c√≥ Datetime kh√¥ng h·ª£p l·ªá
        df = df.dropna(subset=['Datetime'])

        # S·∫Øp x·∫øp theo th·ªùi gian
        df = df.sort_values('Datetime')

        # Thay th·∫ø gi√° tr·ªã -200 b·∫±ng NaN
        df = df.replace(-200, np.nan)

        return df

    except Exception as e:
        st.error(f"L·ªói khi ƒë·ªçc d·ªØ li·ªáu: {str(e)}")
        return None


# ====== MAIN APP ======
def main():
    render_animated_header()

    # T·∫°o hi·ªáu ·ª©ng loading
    with st.spinner('ƒêang t·∫£i d·ªØ li·ªáu v√† kh·ªüi t·∫°o ·ª©ng d·ª•ng...'):
        time.sleep(1)

    # T·∫£i d·ªØ li·ªáu
    df = load_data()

    if df is None or df.empty:
        st.error("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu ho·∫∑c d·ªØ li·ªáu tr·ªëng. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi ho·∫∑c ƒë·ªãnh d·∫°ng d·ªØ li·ªáu.")
        return

    # Ki·ªÉm tra c√°c c·ªôt c√≥ trong d·ªØ li·ªáu
    available_columns = df.columns.tolist()
    pollutants = ['CO(GT)', 'NOx(GT)', 'PT08.S5(O3)', 'C6H6(GT)']
    weather = ['T', 'RH', 'AH']

    # ====== SIDEBAR HI·ªÜN ƒê·∫†I ======
    with st.sidebar:
        st.markdown("""
        <div style="display: flex; align-items: center; margin-bottom: 1.5rem;">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" style="margin-right: 0.5rem;">
                <path d="M10 20V14H14V20H19V12H22L12 3L2 12H5V20H10Z" fill="#4a8fe7"/>
            </svg>
            <h2 style="margin: 0; color: white;">B·ªô l·ªçc d·ªØ li·ªáu</h2>
        </div>
        """, unsafe_allow_html=True)

        # Date/Time Filter
        with st.expander("üóìÔ∏è L·ªçc theo th·ªùi gian", expanded=True):
            min_date = df['Datetime'].min().date()
            max_date = df['Datetime'].max().date()

            col1, col2 = st.columns(2)
            with col1:
                start_date = st.date_input("T·ª´ ng√†y", min_date, key="start_date")
            with col2:
                end_date = st.date_input("ƒê·∫øn ng√†y", max_date, key="end_date")

            col3, col4 = st.columns(2)
            with col3:
                start_time = st.time_input("T·ª´ gi·ªù", datetime.strptime("00:00:00", "%H:%M:%S").time(), key="start_time")
            with col4:
                end_time = st.time_input("ƒê·∫øn gi·ªù", datetime.strptime("23:59:59", "%H:%M:%S").time(), key="end_time")

        # Bi·∫øn l·ª±a ch·ªçn
        with st.expander("üìä Ch·ªçn bi·∫øn hi·ªÉn th·ªã", expanded=True):
            st.markdown("**Ch·∫•t √¥ nhi·ªÖm**", help="Ch·ªçn c√°c ch·∫•t √¥ nhi·ªÖm ƒë·ªÉ hi·ªÉn th·ªã")
            selected_pollutants = []
            for poll in pollutants:
                if poll in available_columns:
                    selected_pollutants.append(st.checkbox(poll, True, key=f"poll_{poll}"))
                else:
                    st.warning(f"Kh√¥ng t√¨m th·∫•y c·ªôt {poll} trong d·ªØ li·ªáu")

            st.markdown("**Th√¥ng s·ªë kh√≠ t∆∞·ª£ng**", help="Ch·ªçn c√°c th√¥ng s·ªë kh√≠ t∆∞·ª£ng ƒë·ªÉ hi·ªÉn th·ªã")
            selected_weather = []
            for w in weather:
                if w in available_columns:
                    selected_weather.append(st.checkbox(w, True, key=f"weather_{w}"))
                else:
                    st.warning(f"Kh√¥ng t√¨m th·∫•y c·ªôt {w} trong d·ªØ li·ªáu")

    # ====== MAIN DASHBOARD ======
    # L·ªçc d·ªØ li·ªáu theo th·ªùi gian
    try:
        start_dt = datetime.combine(start_date, start_time)
        end_dt = datetime.combine(end_date, end_time)
        df_filtered = df[(df['Datetime'] >= start_dt) & (df['Datetime'] <= end_dt)]
    except Exception as e:
        st.error(f"L·ªói khi l·ªçc d·ªØ li·ªáu theo th·ªùi gian: {str(e)}")
        df_filtered = df.copy()

    # T·∫°o tabs
    tab1, tab2, tab3 = st.tabs(["üìà Dashboard", "üîç Ph√¢n t√≠ch", "üì§ D·ªØ li·ªáu"])

    with tab1:
        # Th·ªëng k√™ nhanh
        st.markdown("### üìä T·ªïng quan d·ªØ li·ªáu")
        col1, col2, col3 = st.columns(3)
        with col1:
            st.markdown(f"""
            <div class="custom-card">
                <h3 style="color: var(--primary-color); margin-top: 0;">Th·ªùi gian</h3>
                <p>B·∫Øt ƒë·∫ßu: {df_filtered['Datetime'].min().strftime('%d/%m/%Y %H:%M')}</p>
                <p>K·∫øt th√∫c: {df_filtered['Datetime'].max().strftime('%d/%m/%Y %H:%M')}</p>
            </div>
            """, unsafe_allow_html=True)

        with col2:
            st.markdown(f"""
            <div class="custom-card">
                <h3 style="color: var(--primary-color); margin-top: 0;">S·ªë l∆∞·ª£ng d·ªØ li·ªáu</h3>
                <p>T·ªïng s·ªë m·∫´u: {len(df_filtered):,}</p>
                <p>S·ªë ng√†y: {(df_filtered['Datetime'].max() - df_filtered['Datetime'].min()).days + 1}</p>
            </div>
            """, unsafe_allow_html=True)

        with col3:
            avg_co = df_filtered['CO(GT)'].mean() if 'CO(GT)' in df_filtered.columns else 'N/A'
            avg_nox = df_filtered['NOx(GT)'].mean() if 'NOx(GT)' in df_filtered.columns else 'N/A'
            st.markdown(f"""
            <div class="custom-card">
                <h3 style="color: var(--primary-color); margin-top: 0;">Ch·∫•t l∆∞·ª£ng kh√¥ng kh√≠</h3>
                <p>CO trung b√¨nh: {avg_co if isinstance(avg_co, str) else f"{avg_co:.2f} ppm"}</p>
                <p>NOx trung b√¨nh: {avg_nox if isinstance(avg_nox, str) else f"{avg_nox:.2f} ppb"}</p>
            </div>
            """, unsafe_allow_html=True)

        # Bi·ªÉu ƒë·ªì ch√≠nh
        st.markdown("### üå°Ô∏è Bi·ªÉu ƒë·ªì theo d√µi")
        if not df_filtered.empty:
            fig = make_subplots(specs=[[{"secondary_y": True}]])

            # Th√™m d·ªØ li·ªáu ch·∫•t √¥ nhi·ªÖm
            for poll in [p for p in pollutants if p in df_filtered.columns]:
                fig.add_trace(
                    go.Scatter(
                        x=df_filtered['Datetime'],
                        y=df_filtered[poll],
                        name=poll,
                        line=dict(width=2),
                        mode='lines',
                        hovertemplate="%{y:.2f}<extra></extra>"
                    ),
                    secondary_y=False
                )

            # Th√™m d·ªØ li·ªáu kh√≠ t∆∞·ª£ng
            for w in [w for w in weather if w in df_filtered.columns]:
                fig.add_trace(
                    go.Scatter(
                        x=df_filtered['Datetime'],
                        y=df_filtered[w],
                        name=w,
                        line=dict(dash='dot', width=1.5),
                        mode='lines',
                        hovertemplate="%{y:.2f}<extra></extra>"
                    ),
                    secondary_y=True
                )

            fig.update_layout(
                height=500,
                template='plotly_dark',
                hovermode="x unified",
                legend=dict(
                    orientation="h",
                    yanchor="bottom",
                    y=1.02,
                    xanchor="right",
                    x=1
                ),
                margin=dict(l=20, r=20, t=40, b=20),
                plot_bgcolor='rgba(0,0,0,0)',
                paper_bgcolor='rgba(0,0,0,0)'
            )

            fig.update_yaxes(title_text="N·ªìng ƒë·ªô ch·∫•t √¥ nhi·ªÖm", secondary_y=False)
            fig.update_yaxes(title_text="Th√¥ng s·ªë kh√≠ t∆∞·ª£ng", secondary_y=True)

            st.plotly_chart(fig, use_container_width=True)

    with tab2:
        st.markdown("### üî• Ph√¢n t√≠ch t∆∞∆°ng quan")
        # L·ªçc c√°c c·ªôt c√≥ trong d·ªØ li·ªáu
        available_vars = [v for v in pollutants + weather if v in df_filtered.columns]

        if len(available_vars) >= 2:
            corr_matrix = df_filtered[available_vars].corr()

            fig, ax = plt.subplots(figsize=(10, 8))
            sns.heatmap(
                corr_matrix,
                annot=True,
                fmt=".2f",
                cmap="coolwarm",
                center=0,
                square=True,
                linewidths=.5,
                cbar_kws={"shrink": .8},
                ax=ax
            )
            plt.title("Ma tr·∫≠n t∆∞∆°ng quan gi·ªØa c√°c th√¥ng s·ªë", pad=20, color='white')
            ax.set_facecolor('#2c3e50')
            fig.patch.set_facecolor('#2c3e50')
            ax.tick_params(axis='x', colors='white')
            ax.tick_params(axis='y', colors='white')
            st.pyplot(fig)

            # Ph√¢n t√≠ch xu h∆∞·ªõng
            st.markdown("### üìâ Ph√¢n t√≠ch xu h∆∞·ªõng")
            selected_trend = st.selectbox("Ch·ªçn th√¥ng s·ªë ƒë·ªÉ ph√¢n t√≠ch xu h∆∞·ªõng", available_vars)

            if selected_trend in df_filtered.columns:
                trend_fig = go.Figure()

                trend_fig.add_trace(
                    go.Scatter(
                        x=df_filtered['Datetime'],
                        y=df_filtered[selected_trend],
                        name='Gi√° tr·ªã th·ª±c',
                        line=dict(color='#4a8fe7')
                    )
                )

                # Th√™m ƒë∆∞·ªùng trung b√¨nh 7 ng√†y
                rolling_mean = df_filtered.set_index('Datetime')[selected_trend].rolling('7D').mean()
                trend_fig.add_trace(
                    go.Scatter(
                        x=rolling_mean.index,
                        y=rolling_mean.values,
                        name='Trung b√¨nh 7 ng√†y',
                        line=dict(color='#ff6b6b', dash='dash')
                    )
                )

                trend_fig.update_layout(
                    title=f"Xu h∆∞·ªõng {selected_trend}",
                    xaxis_title="Th·ªùi gian",
                    yaxis_title="Gi√° tr·ªã",
                    template='plotly_dark',
                    plot_bgcolor='rgba(0,0,0,0)',
                    paper_bgcolor='rgba(0,0,0,0)'
                )

                st.plotly_chart(trend_fig, use_container_width=True)

    with tab3:
        st.markdown("### üìÇ D·ªØ li·ªáu th√¥")

        # Hi·ªÉn th·ªã to√†n b·ªô d·ªØ li·ªáu d·∫°ng b·∫£ng
        st.dataframe(
            df_filtered,
            height=600,  # Chi·ªÅu cao c·ªë ƒë·ªãnh
            use_container_width=True,
            hide_index=True  # ·∫®n ch·ªâ s·ªë d√≤ng
        )

        # Th√¥ng tin t√≥m t·∫Øt trong expander
        with st.expander("‚ÑπÔ∏è Th√¥ng tin d·ªØ li·ªáu"):
            cols = st.columns(3)
            with cols[0]:
                st.metric("S·ªë d√≤ng", len(df_filtered))
            with cols[1]:
                st.metric("S·ªë c·ªôt", len(df_filtered.columns))
            with cols[2]:
                st.metric("D·ªØ li·ªáu thi·∫øu", df_filtered.isna().sum().sum())

        # T√πy ch·ªçn xu·∫•t d·ªØ li·ªáu
        st.markdown("### üì§ Xu·∫•t d·ªØ li·ªáu")
        export_format = st.radio("ƒê·ªãnh d·∫°ng xu·∫•t", ["CSV", "Excel"], horizontal=True)

        if st.button("Xu·∫•t d·ªØ li·ªáu ƒë√£ l·ªçc", type="primary"):
            if export_format == "CSV":
                csv = df_filtered.to_csv(index=False).encode('utf-8')
                st.download_button(
                    label="T·∫£i xu·ªëng CSV",
                    data=csv,
                    file_name=f"air_quality_{start_date}_to_{end_date}.csv",
                    mime="text/csv"
                )
            else:
                from io import BytesIO
                output = BytesIO()
                with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                    df_filtered.to_excel(writer, index=False)
                excel_data = output.getvalue()
                st.download_button(
                    label="T·∫£i xu·ªëng Excel",
                    data=excel_data,
                    file_name=f"air_quality_{start_date}_to_{end_date}.xlsx",
                    mime="application/vnd.ms-excel"
                )

if __name__ == "__main__":
    main()
'''

with open('/content/app.py', 'w') as f:
    f.write(app_code)

# --- 3. Kh·ªüi ch·∫°y ·ª©ng d·ª•ng ---
from pyngrok import ngrok
import subprocess
import threading
import time
import requests

# Reset ngrok tunnels
ngrok.kill()

# C·∫•u h√¨nh Ngrok
NGROK_TOKEN = "2wIdHLEeJI9sBLsjQ3Lkt30ZYkT_33pMAYJokqqqyypmD9Zz9"  # üëà Thay token c·ªßa b·∫°n
ngrok.set_auth_token(NGROK_TOKEN)

# Kh·ªüi ch·∫°y Streamlit
def run_streamlit():
    subprocess.run([
        "streamlit", "run",
        "/content/app.py",
        "--server.port", "8501",
        "--server.headless", "true",
        "--browser.gatherUsageStats", "false"
    ])

threading.Thread(target=run_streamlit, daemon=True).start()

# Ch·ªù kh·ªüi ƒë·ªông
time.sleep(8)

# T·∫°o public URL
try:
    tunnel = ngrok.connect(8501, "http")
    public_url = tunnel.public_url
    print(f"\nüîó Truy c·∫≠p ·ª©ng d·ª•ng t·∫°i: {public_url}")
    print(f"üìä Xem dashboard Ngrok: https://dashboard.ngrok.com/status/tunnels")

except Exception as e:
    print(f"\n‚ùå L·ªói k·∫øt n·ªëi: {str(e)}")
    print("üëâ Nguy√™n nh√¢n th∆∞·ªùng g·∫∑p:")
    print("- H·∫øt h·∫°n token Ngrok")
    print("- Ch·∫°y qu√° 3 tunnel c√πng l√∫c (t√†i kho·∫£n mi·ªÖn ph√≠)")
    print("- L·ªói m·∫°ng")